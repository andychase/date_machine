// Generated by CoffeeScript 1.6.3
(function() {
  var altTimeRange, amPm, any, asList, basicText, dateNumber, executeFunction, functions, getBest, getCaptureGroups, getFirstDefined, getResults, inArray, largeRepeatWords, matchedTextLength, midnight, militaryTime, monthNumType, monthNumber, monthRange, monthToNumber, monthType, multiTime, noon, overlapping, overlappingAt, parserDescription, pattern, progressiveMatch, removeLowerOverlapping, reparseEmulator, reverseBasicText, slash, sortByOrderAscending, throughRange, timeAndTime, timeExpression, timeRange, timedeltaFrom_Date, untilRange, weekdayRangeWithExtra, weekdayRangeWithExtraBackwards, weekdayRangeWithTime, weekdayRangeWithTimeRange, weekdayToNumber, year, _i, _len, _replace,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _replace = function(_old, _new) {
    return {
      year: _new.year != null ? _new.year : _old.year,
      month: _new.month != null ? _new.month : _old.month,
      day: _new.day != null ? _new.day : _old.day,
      hour: _new.hour != null ? _new.hour : _old.hour,
      minute: _new.minute != null ? _new.minute : _old.minute,
      second: _new.second != null ? _new.second : _old.second,
      amPm: _new.amPm != null ? _new.amPm : _old.amPm
    };
  };

  timedeltaFrom_Date = function(startTime, endTime) {
    var hours, minutes, seconds, secondsDifference;
    secondsDifference = 0;
    if ((startTime.hour != null) && (endTime.hour != null)) {
      secondsDifference += 60 * 60 * (endTime.hour - startTime.hour);
      if ((startTime.minute != null) && (endTime.minute != null)) {
        secondsDifference += 60 * (endTime.minute - startTime.minute);
        if ((startTime.second != null) && (endTime.second != null)) {
          secondsDifference += endTime.second - startTime.second;
        }
      }
    }
    hours = Math.floor(secondsDifference / 60 / 60);
    minutes = Math.floor(secondsDifference / 60) - (hours * 60);
    seconds = secondsDifference - (minutes * 60) - (hours * 60 * 60);
    return {
      timedelta: true,
      hours: hours,
      minutes: minutes,
      seconds: seconds
    };
  };

  inArray = function(arr, _) {
    return arr.indexOf(_) !== -1;
  };

  progressiveMatch = function(string, possibilities) {
    var character, matches, month, part, value, _i, _len, _ref;
    part = "";
    if (string == null) {
      return;
    }
    _ref = string.toLowerCase();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      character = _ref[_i];
      part += character;
      matches = [];
      for (month in possibilities) {
        value = possibilities[month];
        if (month.indexOf(part) > -1) {
          matches.push(month);
        }
      }
      if (matches.length === 1) {
        return possibilities[matches[0]];
      }
    }
  };

  monthToNumber = function(monthString) {
    var months;
    months = {
      "january": 1,
      "february": 2,
      "march": 3,
      "april": 4,
      "may": 5,
      "june": 6,
      "july": 7,
      "august": 8,
      "september": 9,
      "october": 10,
      "november": 11,
      "december": 12
    };
    return progressiveMatch(monthString, months);
  };

  weekdayToNumber = function(WeekdayString) {
    var weekdayList;
    weekdayList = {
      "monday": 0,
      "tuesday": 1,
      "wednesday": 2,
      "thursday": 3,
      "friday": 4,
      "saturday": 5,
      "sunday": 6
    };
    return progressiveMatch(WeekdayString, weekdayList);
  };

  amPm = function(input) {
    if (input == null) {
      return;
    }
    if (input.toLowerCase() === "am") {
      return 0;
    } else if (input.toLowerCase() === "pm") {
      return 12;
    }
  };

  militaryTime = function(MilHour, MilMinute, MilSecond) {
    return timeExpression(MilHour, MilMinute, MilSecond, void 0);
  };

  noon = function(hour, AMPM) {
    return hour === 12 && AMPM === 12;
  };

  midnight = function(hour, AMPM) {
    return hour === 12 && AMPM === 0;
  };

  timeExpression = function(Hour, Minute, Second, AMPM, SpecialTimeText) {
    var d;
    if ((Hour == null) && (Minute == null) && (Second == null) && (AMPM == null) && (SpecialTimeText == null)) {
      return;
    }
    if (SpecialTimeText) {
      if (SpecialTimeText.toLowerCase() === "noon") {
        return {
          hour: 12
        };
      }
      if (SpecialTimeText.toLowerCase() === "midnight") {
        return {
          hour: 0
        };
      }
    }
    d = {};
    if (Hour) {
      d.hour = Number(Hour);
    }
    if (Minute) {
      d.minute = Number(Minute);
    }
    if (Second) {
      d.second = Number(Second);
    }
    if (AMPM != null) {
      if (d.hour) {
        if (noon(d.hour, AMPM)) {
          d.hour = 12;
        } else if (midnight(d.hour, AMPM)) {
          d.hour = 0;
        } else {
          d.hour = d.hour + AMPM;
        }
      }
      d.amPm = AMPM;
    }
    if ([d.hour, d.minute, d.second] === [void 0, void 0, void 0]) {
      return void 0;
    }
    return d;
  };

  timeAndTime = function(Hour, Minute, AMPM1, Hour2, Minute2, AMPM2) {
    if (AMPM2 != null) {
      AMPM2 = amPm(AMPM2);
    }
    if ((AMPM1 == null) && (AMPM2 == null)) {
      return [timeExpression(Hour, Minute), timeExpression(Hour2, Minute2)];
    } else if (AMPM1 == null) {
      return [timeExpression(Hour, Minute, void 0, AMPM2), timeExpression(Hour2, Minute2, void 0, AMPM2)];
    } else if (AMPM2 == null) {
      return [timeExpression(Hour, Minute, void 0, AMPM1), timeExpression(Hour2, Minute2, void 0, AMPM1)];
    }
  };

  monthType = function() {
    var input, value, _i, _len;
    input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      value = input[_i];
      if (value != null) {
        return Number(value);
      }
    }
  };

  dateNumber = function(Day, Abbr) {
    if (Day != null) {
      return Number(Day);
    }
  };

  monthNumber = function(MonthNum) {
    return Number(MonthNum);
  };

  monthNumType = function(input) {
    return Number(input);
  };

  year = function(Year) {
    if (Year != null) {
      return Number(Year);
    }
  };

  getFirstDefined = function(_) {
    var item, _i, _len;
    for (_i = 0, _len = _.length; _i < _len; _i++) {
      item = _[_i];
      if (item != null) {
        return item;
      }
    }
  };

  weekdayRangeWithTime = function(time1, time2, _arg, _arg1, MonthRange) {
    var date, output, weekday1, weekday2, _i, _len;
    weekday1 = _arg[0];
    weekday2 = _arg1[0];
    output = [];
    time1 = getFirstDefined(time1);
    time2 = getFirstDefined(time2);
    if (time1 != null) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        output.push(_replace(date, time1));
        if (time2 != null) {
          output.push(_replace(date, time2));
        }
      }
    }
    return output;
  };

  weekdayRangeWithExtra = function(time, andTime, weekdayStart, weekdayEnd, extraTime, extraWeekday, MonthRange) {
    var date, output, _i, _j, _len, _ref, _results;
    output = [];
    if (time != null) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        if (date.weekday != null) {
          if (_ref = date.weekday, __indexOf.call((function() {
            _results = [];
            for (var _j = weekdayStart; weekdayStart <= weekdayEnd ? _j <= weekdayEnd : _j >= weekdayEnd; weekdayStart <= weekdayEnd ? _j++ : _j--){ _results.push(_j); }
            return _results;
          }).apply(this), _ref) >= 0) {
            output.push(_replace(date, time));
            if (andTime != null) {
              output.push(_replace(date, andTime));
            }
          }
          if (date.weekday === extraWeekday) {
            output.push(_replace(date, extraTime));
          }
        }
      }
    }
    return output;
  };

  weekdayRangeWithExtraBackwards = function(extraTime, extraWeekday, time, weekdayStart, weekdayEnd, MonthRange) {
    return weekdayRangeWithExtra(time[0], time[1], weekdayStart, weekdayEnd, extraTime, extraWeekday, MonthRange);
  };

  reverseBasicText = function(time, day, month, year) {
    return basicText(time, void 0, void 0, month, day, year);
  };

  basicText = function(time, firstSecond, weekday, month, day, year) {
    if (day == null) {
      day = 1;
    }
    if ((day instanceof Array) && day.length === 1) {
      day = day[0];
    }
    if ((year instanceof Array) && year.length === 1) {
      year = year[0];
    }
    if (time == null) {
      return {
        year: year,
        month: month,
        day: day
      };
    } else {
      return {
        year: year,
        month: month,
        day: day,
        hour: time.hour,
        minute: time.minute,
        second: time.second,
        amPm: time.amPm
      };
    }
  };

  slash = function(month, day, year, time) {
    return basicText(time, void 0, void 0, month, day, year);
  };

  monthRange = function(month, dateA, dateB) {
    var day, output, _i;
    output = [];
    for (day = _i = dateA; dateA <= dateB ? _i <= dateB : _i >= dateB; day = dateA <= dateB ? ++_i : --_i) {
      output.push(basicText(void 0, void 0, void 0, month, day, void 0));
    }
    return output;
  };

  multiTime = function(time1, BasicText) {
    var output;
    output = [];
    if ((time1 != null) && (BasicText != null)) {
      output.push(_replace(BasicText, time1));
      output.push(BasicText);
      return output;
    }
  };

  largeRepeatWords = function() {
    return void 0;
  };

  weekdayRangeWithTimeRange = function(time1, weekdayRange) {
    var output, range, weekday, _i, _len;
    output = [];
    if ((time1 != null) && (weekdayRange != null)) {
      range = timedeltaFrom_Date(_replace(weekdayRange[0], time1), weekdayRange[0]);
      for (_i = 0, _len = weekdayRange.length; _i < _len; _i++) {
        weekday = weekdayRange[_i];
        output.push(_replace(weekday, {
          hour: time1.hour,
          minute: time1.minute,
          amPm: time1.amPm
        }));
        output.push(range);
      }
      return output;
    }
  };

  timeRange = function(unstrictTime, strictTime, date, reverse) {
    var endtime, starttime;
    endtime = date;
    starttime = endtime;
    if (unstrictTime) {
      starttime = _replace(starttime, {
        hour: Number(unstrictTime[0])
      });
      if (date.amPm) {
        starttime = _replace(starttime, {
          hour: starttime.hour + date.amPm,
          amPm: date.amPm
        });
      }
    } else {
      starttime = _replace(starttime, {
        hour: strictTime.hour,
        minute: strictTime.minute
      });
    }
    timeRange = timedeltaFrom_Date(starttime, endtime);
    if (reverse) {
      timeRange = timedeltaFrom_Date(endtime, starttime);
    }
    return [starttime, timeRange];
  };

  altTimeRange = function(firstSecond, weekday, month, day, year, time, unstrictTime, strictTime) {
    return timeRange(unstrictTime, strictTime, basicText(time, firstSecond, weekday, month, day, year), reverse);
  };

  untilRange = function(date1, date2) {
    if (date1 && date2) {
      return [date1, timedeltaFrom_Date(date1, date2)];
    }
  };

  throughRange = function(time, weekday1, weekday2, month, date, beginning) {
    var day, ending, output, temp, _i, _j, _ref, _ref1, _results;
    output = [];
    if (month && date && beginning && weekday1) {
      ending = {
        month: month,
        day: date
      };
      for (day = _i = _ref = beginning.day, _ref1 = ending.day; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; day = _ref <= _ref1 ? ++_i : --_i) {
        temp = {
          month: month,
          day: date
        };
        if (temp.weekday && inArray((function() {
          _results = [];
          for (var _j = weekday1; weekday1 <= weekday2 ? _j <= weekday2 : _j >= weekday2; weekday1 <= weekday2 ? _j++ : _j--){ _results.push(_j); }
          return _results;
        }).apply(this), temp.weekday)) {
          if (time) {
            output.push(_replace(temp, time));
          } else {
            output.push(temp);
          }
        }
      }
      return output;
    }
  };

  functions = {
    "MonthString": monthToNumber,
    "AMPM": amPm,
    "Chase Year": year,
    "Chase Date": dateNumber,
    "Chase Month": monthNumber,
    "Steve Valaitis": timeExpression,
    "Greg Burns": function(hour, amPm) {
      return timeExpression(hour, null, null, amPm, null);
    },
    "Greg Burns UnstrictTime:": timeExpression,
    "Steve Valaitis2": militaryTime,
    "Steve Valaitis And Time": timeAndTime,
    "Text Parts": timeExpression,
    "Michael Ash10": weekdayToNumber,
    "Month": monthType,
    "MonthNum": monthNumType,
    "LargeRepeatWords": largeRepeatWords,
    "BasicText": basicText,
    "ReverseBasicText": reverseBasicText,
    "Slash": slash,
    "MonthRange": monthRange,
    "MultiTime": multiTime,
    "WeekdayRangeWithTime": weekdayRangeWithTime,
    "WeekdayRangeWithExtra": weekdayRangeWithExtra,
    "WeekdayRangeWithExtraBackwards": weekdayRangeWithExtraBackwards,
    "WeekdayRangeWithTimeRange": weekdayRangeWithTimeRange,
    "UntilRange": untilRange,
    "ThroughRange": throughRange,
    "TimeRange": timeRange,
    "AltTimeRange": altTimeRange,
    "_default": function(_) {
      if (any(_)) {
        return _;
      } else {
        return void 0;
      }
    },
    "_default_type": function() {
      var item, _, _i, _len;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_ != null) {
        for (_i = 0, _len = _.length; _i < _len; _i++) {
          item = _[_i];
          if (item != null) {
            return item;
          }
        }
      }
    },
    "_default_group": function() {
      var _;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_[0] != null) {
        return _[0];
      }
    }
  };

  parserDescription = [
    {
      "regex": "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:([12][0-9]{3}|[09][0-9])))?",
      "tree": [12, "ReverseBasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      "order": 2
    }, {
      "regex": "(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))",
      "tree": [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]],
      "order": 6
    }, {
      "regex": "(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))(?:\\sat\\s|,\\s|:\\s)(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))",
      "tree": [8, "_default", [[1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      "order": 1
    }, {
      "regex": "(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?",
      "tree": [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      "order": 1
    }, {
      "regex": "(?:(?:(1[0-2]|[0]?[1-9])))\\/(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\/(?:(?:([12][0-9]{3}|[09][0-9])))\\s?-?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?",
      "tree": [11, "Slash", [[1, "MonthNum", [[1, "Chase Month", [[1, "MonthNum", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      "order": 5
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?\\s(?:and|\\&)\\s([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      "tree": [22, "WeekdayRangeWithExtraBackwards", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "_default_type", [[6, "Steve Valaitis And Time", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      "order": 10
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      "tree": [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      "order": 7
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      "tree": [30, "WeekdayRangeWithExtra", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      "order": 9
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))),?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))",
      "tree": [8, "_default", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      "order": 1
    }, {
      "regex": "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?",
      "tree": [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      "order": 3
    }, {
      "regex": "(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s?-\\s?(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))",
      "tree": [24, "AltTimeRange", [[3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      "order": 9
    }, {
      "regex": "(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))\\s?-\\s?(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [24, "TimeRange", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 9
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\-(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))))",
      "tree": [29, "WeekdayRangeWithTimeRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]]]],
      "order": 10
    }, {
      "regex": "(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)\\suntil\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [32, "UntilRange", [[16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 11
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s(?:-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s)?\\sthrough\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))).?,?\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [29, "ThroughRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 12
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\sand\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [23, "MultiTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 4
    }
  ];

  overlapping = function(start1, end1, start2, end2) {
    return !((start1 <= start2 && start1 <= end2 && end1 <= end2 && end1 <= start2) || (start1 >= start2 && start1 >= end2 && end1 >= end2 && end1 >= start2));
  };

  overlappingAt = function(start, end, current) {
    var cEnd, cStart, currentIndex, output, _, _ref;
    output = [];
    for (currentIndex in current) {
      _ref = current[currentIndex], _ = _ref[0], cStart = _ref[1], cEnd = _ref[2], _ = _ref[3];
      if (overlapping(cStart, cEnd, start, end)) {
        output.push(currentIndex);
      }
    }
    return output;
  };

  removeLowerOverlapping = function(current, higher) {
    var hEnd, hStart, match, order, overlap, overlaps, _i, _len;
    order = higher[0], hStart = higher[1], hEnd = higher[2], match = higher[3];
    overlaps = overlappingAt(hStart, hEnd, current);
    for (_i = 0, _len = overlaps.length; _i < _len; _i++) {
      overlap = overlaps[_i];
      current.splice(overlap, 1);
    }
    if (overlaps.length > 0) {
      current.splice(overlaps[0], 0, higher);
    } else {
      current.push(higher);
    }
    return current;
  };

  asList = function(_) {
    return [].concat(_);
  };

  getResults = function(_) {
    var i, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = _.length; _i < _len; _i++) {
      i = _[_i];
      _results.push(i[3]);
    }
    return _results;
  };

  any = function(_) {
    return (_ != null) && ((!(_ instanceof Array)) || _.filter(function(a) {
      return a != null;
    }).length > 0);
  };

  getBest = function(_) {
    return getResults(_.reduce(removeLowerOverlapping, []));
  };

  sortByOrderAscending = function(_) {
    return _.sort(function(a, b) {
      return a[0] - b[0];
    });
  };

  getCaptureGroups = function(_) {
    return _.slice(1);
  };

  matchedTextLength = function(_) {
    return _[0].length;
  };

  this.dateMachine = function(input) {
    var dateMachineOutput, end, functionName, matcherOutput, matches, pattern, regex, start, take, tree, _i, _len, _ref;
    dateMachineOutput = [];
    for (_i = 0, _len = parserDescription.length; _i < _len; _i++) {
      pattern = parserDescription[_i];
      regex = pattern.regex;
      _ref = pattern.tree, take = _ref[0], functionName = _ref[1], tree = _ref[2];
      while ((matches = regex.exec(input)) !== null) {
        matcherOutput = reparseEmulator(take, functionName, tree, getCaptureGroups(matches), functions);
        start = regex.lastIndex - matchedTextLength(matches);
        end = regex.lastIndex - 1;
        if (any(matcherOutput)) {
          dateMachineOutput.push([pattern.order, start, end, asList(matcherOutput)]);
        }
      }
    }
    return getBest(sortByOrderAscending(dateMachineOutput));
  };

  reparseEmulator = function(take, functionName, tree, matches, functions) {
    var currentPosition, element, elementFunctionName, elementTake, elementTree, releventMatches, results, _i, _len;
    results = [];
    currentPosition = 0;
    for (_i = 0, _len = tree.length; _i < _len; _i++) {
      element = tree[_i];
      elementTake = element[0], elementFunctionName = element[1], elementTree = element[2];
      releventMatches = matches.slice(currentPosition, currentPosition + elementTake);
      results.push(reparseEmulator(elementTake, elementFunctionName, elementTree, releventMatches, functions));
      currentPosition += elementTake;
    }
    if (tree.length === 0) {
      return executeFunction(functionName, matches.slice(0, take), functions, true);
    } else {
      return executeFunction(functionName, results, functions, true);
    }
  };

  executeFunction = function(functionName, arguments_, functions, isType) {
    return functions[functionName].apply(functions[functionName], arguments_);
  };

  for (_i = 0, _len = parserDescription.length; _i < _len; _i++) {
    pattern = parserDescription[_i];
    pattern.regex = new RegExp(pattern.regex, "gi");
  }

}).call(this);
