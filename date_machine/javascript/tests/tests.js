// Generated by CoffeeScript 1.6.3
(function() {
  var alt_time_range, am_pm, any, as_list, basic_text, date_number, date_raw_test, date_test, execute_function, fill_result, functions, get_best, get_capture_groups, get_first_defined, get_results, in_array, large_repeat_words, matched_text_length, midnight, military_time, month_num_type, month_number, month_range, month_to_number, month_type, multi_time, noon, overlapping, overlapping_at, parser_description, pattern, progressive_match, remove_lower_overlapping, reparse_emulator, reverse_basic_text, slash, sort_by_order_ascending, through_range, time_and_time, time_expression, time_range, timedelta_from_Date, until_range, weekday_range_with_extra, weekday_range_with_extra_backwards, weekday_range_with_time, weekday_range_with_time_range, weekday_to_number, year, _i, _len, _replace,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  _replace = function(_old, _new) {
    return {
      year: _new.year != null ? _new.year : _old.year,
      month: _new.month != null ? _new.month : _old.month,
      day: _new.day != null ? _new.day : _old.day,
      hour: _new.hour != null ? _new.hour : _old.hour,
      minute: _new.minute != null ? _new.minute : _old.minute,
      second: _new.second != null ? _new.second : _old.second,
      am_pm: _new.am_pm != null ? _new.am_pm : _old.am_pm
    };
  };

  timedelta_from_Date = function(start_time, end_time) {
    var hours, minutes, seconds, seconds_difference;
    seconds_difference = 0;
    if ((start_time.hour != null) && (end_time.hour != null)) {
      seconds_difference += 60 * 60 * (end_time.hour - start_time.hour);
      if ((start_time.minute != null) && (end_time.minute != null)) {
        seconds_difference += 60 * (end_time.minute - start_time.minute);
        if ((start_time.second != null) && (end_time.second != null)) {
          seconds_difference += end_time.second - start_time.second;
        }
      }
    }
    hours = Math.floor(seconds_difference / 60 / 60);
    minutes = Math.floor(seconds_difference / 60) - (hours * 60);
    seconds = seconds_difference - (minutes * 60) - (hours * 60 * 60);
    return {
      timedelta: true,
      hours: hours,
      minutes: minutes,
      seconds: seconds
    };
  };

  in_array = function(arr, _) {
    return arr.indexOf(_) !== -1;
  };

  progressive_match = function(string, possibilities) {
    var character, matches, month, part, value, _i, _len, _ref;
    part = "";
    if (string == null) {
      return;
    }
    _ref = string.toLowerCase();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      character = _ref[_i];
      part += character;
      matches = [];
      for (month in possibilities) {
        value = possibilities[month];
        if (month.indexOf(part) > -1) {
          matches.push(month);
        }
      }
      if (matches.length === 1) {
        return possibilities[matches[0]];
      }
    }
  };

  month_to_number = function(month_string) {
    var months;
    months = {
      "january": 1,
      "february": 2,
      "march": 3,
      "april": 4,
      "may": 5,
      "june": 6,
      "july": 7,
      "august": 8,
      "september": 9,
      "october": 10,
      "november": 11,
      "december": 12
    };
    return progressive_match(month_string, months);
  };

  weekday_to_number = function(WeekdayString) {
    var weekday_list;
    weekday_list = {
      "monday": 0,
      "tuesday": 1,
      "wednesday": 2,
      "thursday": 3,
      "friday": 4,
      "saturday": 5,
      "sunday": 6
    };
    return progressive_match(WeekdayString, weekday_list);
  };

  am_pm = function(input) {
    if (input == null) {
      return;
    }
    if (input.toLowerCase() === "am") {
      return 0;
    } else if (input.toLowerCase() === "pm") {
      return 12;
    }
  };

  military_time = function(MilHour, MilMinute, MilSecond) {
    return time_expression(MilHour, MilMinute, MilSecond, void 0);
  };

  noon = function(hour, AMPM) {
    return hour === 12 && AMPM === 12;
  };

  midnight = function(hour, AMPM) {
    return hour === 12 && AMPM === 0;
  };

  time_expression = function(Hour, Minute, Second, AMPM, SpecialTimeText) {
    var d;
    if ((Hour == null) && (Minute == null) && (Second == null) && (AMPM == null) && (SpecialTimeText == null)) {
      return;
    }
    if (SpecialTimeText) {
      if (SpecialTimeText.toLowerCase() === "noon") {
        return {
          hour: 12
        };
      }
      if (SpecialTimeText.toLowerCase() === "midnight") {
        return {
          hour: 0
        };
      }
    }
    d = {};
    if (Hour) {
      d.hour = Number(Hour);
    }
    if (Minute) {
      d.minute = Number(Minute);
    }
    if (Second) {
      d.second = Number(Second);
    }
    if (AMPM != null) {
      if (d.hour) {
        if (noon(d.hour, AMPM)) {
          d.hour = 12;
        } else if (midnight(d.hour, AMPM)) {
          d.hour = 0;
        } else {
          d.hour = d.hour + AMPM;
        }
      }
      d.am_pm = AMPM;
    }
    if ([d.hour, d.minute, d.second] === [void 0, void 0, void 0]) {
      return void 0;
    }
    return d;
  };

  time_and_time = function(Hour, Minute, AMPM1, Hour2, Minute2, AMPM2) {
    if (AMPM2 != null) {
      AMPM2 = am_pm(AMPM2);
    }
    if ((AMPM1 == null) && (AMPM2 == null)) {
      return [time_expression(Hour, Minute), time_expression(Hour2, Minute2)];
    } else if (AMPM1 == null) {
      return [time_expression(Hour, Minute, void 0, AMPM2), time_expression(Hour2, Minute2, void 0, AMPM2)];
    } else if (AMPM2 == null) {
      return [time_expression(Hour, Minute, void 0, AMPM1), time_expression(Hour2, Minute2, void 0, AMPM1)];
    }
  };

  month_type = function() {
    var input, value, _i, _len;
    input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      value = input[_i];
      if (value != null) {
        return Number(value);
      }
    }
  };

  date_number = function(Day, Abbr) {
    if (Day != null) {
      return Number(Day);
    }
  };

  month_number = function(MonthNum) {
    return Number(MonthNum);
  };

  month_num_type = function(input) {
    return Number(input);
  };

  year = function(Year) {
    if (Year != null) {
      return Number(Year);
    }
  };

  get_first_defined = function(_) {
    var item, _i, _len;
    for (_i = 0, _len = _.length; _i < _len; _i++) {
      item = _[_i];
      if (item != null) {
        return item;
      }
    }
  };

  weekday_range_with_time = function(time1, time2, _arg, _arg1, MonthRange) {
    var date, output, weekday1, weekday2, _i, _len;
    weekday1 = _arg[0];
    weekday2 = _arg1[0];
    output = [];
    time1 = get_first_defined(time1);
    time2 = get_first_defined(time2);
    if (time1 != null) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        output.push(_replace(date, time1));
        if (time2 != null) {
          output.push(_replace(date, time2));
        }
      }
    }
    return output;
  };

  weekday_range_with_extra = function(time, and_time, weekday_start, weekday_end, extra_time, extra_weekday, MonthRange) {
    var date, output, _i, _j, _len, _ref, _results;
    output = [];
    if (time != null) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        if (date.weekday != null) {
          if (_ref = date.weekday, __indexOf.call((function() {
            _results = [];
            for (var _j = weekday_start; weekday_start <= weekday_end ? _j <= weekday_end : _j >= weekday_end; weekday_start <= weekday_end ? _j++ : _j--){ _results.push(_j); }
            return _results;
          }).apply(this), _ref) >= 0) {
            output.push(_replace(date, time));
            if (and_time != null) {
              output.push(_replace(date, and_time));
            }
          }
          if (date.weekday === extra_weekday) {
            output.push(_replace(date, extra_time));
          }
        }
      }
    }
    return output;
  };

  weekday_range_with_extra_backwards = function(extra_time, extra_weekday, time, weekday_start, weekday_end, MonthRange) {
    return weekday_range_with_extra(time[0], time[1], weekday_start, weekday_end, extra_time, extra_weekday, MonthRange);
  };

  reverse_basic_text = function(time, day, month, year) {
    return basic_text(time, void 0, void 0, month, day, year);
  };

  basic_text = function(time, first_second, weekday, month, day, year) {
    if (day == null) {
      day = 1;
    }
    if ((day instanceof Array) && day.length === 1) {
      day = day[0];
    }
    if ((year instanceof Array) && year.length === 1) {
      year = year[0];
    }
    if (time == null) {
      return {
        year: year,
        month: month,
        day: day
      };
    } else {
      return {
        year: year,
        month: month,
        day: day,
        hour: time.hour,
        minute: time.minute,
        second: time.second,
        am_pm: time.am_pm
      };
    }
  };

  slash = function(month, day, year, time) {
    return basic_text(time, void 0, void 0, month, day, year);
  };

  month_range = function(month, date_a, date_b) {
    var day, output, _i;
    output = [];
    for (day = _i = date_a; date_a <= date_b ? _i <= date_b : _i >= date_b; day = date_a <= date_b ? ++_i : --_i) {
      output.push(basic_text(void 0, void 0, void 0, month, day, void 0));
    }
    return output;
  };

  multi_time = function(time1, BasicText) {
    var output;
    output = [];
    if ((time1 != null) && (BasicText != null)) {
      output.push(_replace(BasicText, time1));
      output.push(BasicText);
      return output;
    }
  };

  large_repeat_words = function() {
    return void 0;
  };

  weekday_range_with_time_range = function(time1, weekday_range) {
    var output, range, weekday, _i, _len;
    output = [];
    if ((time1 != null) && (weekday_range != null)) {
      range = timedelta_from_Date(_replace(weekday_range[0], time1), weekday_range[0]);
      for (_i = 0, _len = weekday_range.length; _i < _len; _i++) {
        weekday = weekday_range[_i];
        output.push(_replace(weekday, {
          hour: time1.hour,
          minute: time1.minute,
          am_pm: time1.am_pm
        }));
        output.push(range);
      }
      return output;
    }
  };

  time_range = function(unstrict_time, strict_time, date, reverse) {
    var endtime, starttime;
    endtime = date;
    starttime = endtime;
    if (unstrict_time) {
      starttime = _replace(starttime, {
        hour: Number(unstrict_time[0])
      });
      if (date.am_pm) {
        starttime = _replace(starttime, {
          hour: starttime.hour + date.am_pm,
          am_pm: date.am_pm
        });
      }
    } else {
      starttime = _replace(starttime, {
        hour: strict_time.hour,
        minute: strict_time.minute
      });
    }
    time_range = timedelta_from_Date(starttime, endtime);
    if (reverse) {
      time_range = timedelta_from_Date(endtime, starttime);
    }
    return [starttime, time_range];
  };

  alt_time_range = function(first_second, weekday, month, day, year, time, unstrict_time, strict_time) {
    return time_range(unstrict_time, strict_time, basic_text(time, first_second, weekday, month, day, year), reverse);
  };

  until_range = function(date1, date2) {
    if (date1 && date2) {
      return [date1, timedelta_from_Date(date1, date2)];
    }
  };

  through_range = function(time, weekday1, weekday2, month, date, beginning) {
    var day, ending, output, temp, _i, _j, _ref, _ref1, _results;
    output = [];
    if (month && date && beginning && weekday1) {
      ending = {
        month: month,
        day: date
      };
      for (day = _i = _ref = beginning.day, _ref1 = ending.day; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; day = _ref <= _ref1 ? ++_i : --_i) {
        temp = {
          month: month,
          day: date
        };
        if (temp.weekday && in_array((function() {
          _results = [];
          for (var _j = weekday1; weekday1 <= weekday2 ? _j <= weekday2 : _j >= weekday2; weekday1 <= weekday2 ? _j++ : _j--){ _results.push(_j); }
          return _results;
        }).apply(this), temp.weekday)) {
          if (time) {
            output.push(_replace(temp, time));
          } else {
            output.push(temp);
          }
        }
      }
      return output;
    }
  };

  functions = {
    "MonthString": month_to_number,
    "AMPM": am_pm,
    "Chase Year": year,
    "Chase Date": date_number,
    "Chase Month": month_number,
    "Steve Valaitis": time_expression,
    "Greg Burns": function(hour, am_pm) {
      return time_expression(hour, null, null, am_pm, null);
    },
    "Greg Burns UnstrictTime:": time_expression,
    "Steve Valaitis2": military_time,
    "Steve Valaitis And Time": time_and_time,
    "Text Parts": time_expression,
    "Michael Ash10": weekday_to_number,
    "Month": month_type,
    "MonthNum": month_num_type,
    "LargeRepeatWords": large_repeat_words,
    "BasicText": basic_text,
    "ReverseBasicText": reverse_basic_text,
    "Slash": slash,
    "MonthRange": month_range,
    "MultiTime": multi_time,
    "WeekdayRangeWithTime": weekday_range_with_time,
    "WeekdayRangeWithExtra": weekday_range_with_extra,
    "WeekdayRangeWithExtraBackwards": weekday_range_with_extra_backwards,
    "WeekdayRangeWithTimeRange": weekday_range_with_time_range,
    "UntilRange": until_range,
    "ThroughRange": through_range,
    "TimeRange": time_range,
    "AltTimeRange": alt_time_range,
    "_default": function(_) {
      if (any(_)) {
        return _;
      } else {
        return void 0;
      }
    },
    "_default_type": function() {
      var item, _, _i, _len;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_ != null) {
        for (_i = 0, _len = _.length; _i < _len; _i++) {
          item = _[_i];
          if (item != null) {
            return item;
          }
        }
      }
    },
    "_default_group": function() {
      var _;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_[0] != null) {
        return _[0];
      }
    }
  };

  parser_description = [
    {
      "regex": "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:([12][0-9]{3}|[09][0-9])))?",
      "tree": [12, "ReverseBasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      "order": 2
    }, {
      "regex": "(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))",
      "tree": [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]],
      "order": 6
    }, {
      "regex": "(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))(?:\\sat\\s|,\\s|:\\s)(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))",
      "tree": [8, "_default", [[1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      "order": 1
    }, {
      "regex": "(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?",
      "tree": [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      "order": 1
    }, {
      "regex": "(?:(?:(1[0-2]|[0]?[1-9])))\\/(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\/(?:(?:([12][0-9]{3}|[09][0-9])))\\s?-?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?",
      "tree": [11, "Slash", [[1, "MonthNum", [[1, "Chase Month", [[1, "MonthNum", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      "order": 5
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?\\s(?:and|\\&)\\s([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      "tree": [22, "WeekdayRangeWithExtraBackwards", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "_default_type", [[6, "Steve Valaitis And Time", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      "order": 10
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      "tree": [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      "order": 7
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      "tree": [30, "WeekdayRangeWithExtra", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      "order": 9
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))),?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))",
      "tree": [8, "_default", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      "order": 1
    }, {
      "regex": "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?",
      "tree": [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      "order": 3
    }, {
      "regex": "(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s?-\\s?(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))",
      "tree": [24, "AltTimeRange", [[3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      "order": 9
    }, {
      "regex": "(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))\\s?-\\s?(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [24, "TimeRange", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 9
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\-(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))))",
      "tree": [29, "WeekdayRangeWithTimeRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]]]],
      "order": 10
    }, {
      "regex": "(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)\\suntil\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [32, "UntilRange", [[16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 11
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s(?:-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s)?\\sthrough\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))).?,?\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [29, "ThroughRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 12
    }, {
      "regex": "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\sand\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3}|[09][0-9])))?)",
      "tree": [23, "MultiTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      "order": 4
    }
  ];

  overlapping = function(start1, end1, start2, end2) {
    return !((start1 <= start2 && start1 <= end2 && end1 <= end2 && end1 <= start2) || (start1 >= start2 && start1 >= end2 && end1 >= end2 && end1 >= start2));
  };

  overlapping_at = function(start, end, current) {
    var c_end, c_start, current_index, output, _, _ref;
    output = [];
    for (current_index in current) {
      _ref = current[current_index], _ = _ref[0], c_start = _ref[1], c_end = _ref[2], _ = _ref[3];
      if (overlapping(c_start, c_end, start, end)) {
        output.push(current_index);
      }
    }
    return output;
  };

  remove_lower_overlapping = function(current, higher) {
    var h_end, h_start, match, order, overlap, overlaps, _i, _len;
    order = higher[0], h_start = higher[1], h_end = higher[2], match = higher[3];
    overlaps = overlapping_at(h_start, h_end, current);
    for (_i = 0, _len = overlaps.length; _i < _len; _i++) {
      overlap = overlaps[_i];
      current.splice(overlap, 1);
    }
    if (overlaps.length > 0) {
      current.splice(overlaps[0], 0, higher);
    } else {
      current.push(higher);
    }
    return current;
  };

  as_list = function(_) {
    return [].concat(_);
  };

  get_results = function(_) {
    var i, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = _.length; _i < _len; _i++) {
      i = _[_i];
      _results.push(i[3]);
    }
    return _results;
  };

  any = function(_) {
    return (_ != null) && ((!(_ instanceof Array)) || _.filter(function(a) {
      return a != null;
    }).length > 0);
  };

  get_best = function(_) {
    return get_results(_.reduce(remove_lower_overlapping, []));
  };

  sort_by_order_ascending = function(_) {
    return _.sort(function(a, b) {
      return a[0] - b[0];
    });
  };

  get_capture_groups = function(_) {
    return _.slice(1);
  };

  matched_text_length = function(_) {
    return _[0].length;
  };

  this.date_machine = function(input) {
    var date_machine_output, end, function_name, matcher_output, matches, pattern, regex, start, take, tree, _i, _len, _ref;
    date_machine_output = [];
    for (_i = 0, _len = parser_description.length; _i < _len; _i++) {
      pattern = parser_description[_i];
      regex = pattern.regex;
      _ref = pattern.tree, take = _ref[0], function_name = _ref[1], tree = _ref[2];
      while ((matches = regex.exec(input)) !== null) {
        matcher_output = reparse_emulator(take, function_name, tree, get_capture_groups(matches), functions);
        start = regex.lastIndex - matched_text_length(matches);
        end = regex.lastIndex - 1;
        if (any(matcher_output)) {
          date_machine_output.push([pattern.order, start, end, as_list(matcher_output)]);
        }
      }
    }
    return get_best(sort_by_order_ascending(date_machine_output));
  };

  reparse_emulator = function(take, function_name, tree, matches, functions) {
    var current_position, element, element_function_name, element_take, element_tree, relevent_matches, results, _i, _len;
    results = [];
    current_position = 0;
    for (_i = 0, _len = tree.length; _i < _len; _i++) {
      element = tree[_i];
      element_take = element[0], element_function_name = element[1], element_tree = element[2];
      relevent_matches = matches.slice(current_position, current_position + element_take);
      results.push(reparse_emulator(element_take, element_function_name, element_tree, relevent_matches, functions));
      current_position += element_take;
    }
    if (tree.length === 0) {
      return execute_function(function_name, matches.slice(0, take), functions, true);
    } else {
      return execute_function(function_name, results, functions, true);
    }
  };

  execute_function = function(function_name, arguments_, functions, is_type) {
    return functions[function_name].apply(functions[function_name], arguments_);
  };

  for (_i = 0, _len = parser_description.length; _i < _len; _i++) {
    pattern = parser_description[_i];
    pattern.regex = new RegExp(pattern.regex, "gi");
  }

  fill_result = function(_) {
    var key, result, result_set, _j, _k, _len1, _len2;
    for (_j = 0, _len1 = _.length; _j < _len1; _j++) {
      result_set = _[_j];
      for (_k = 0, _len2 = result_set.length; _k < _len2; _k++) {
        result = result_set[_k];
        for (key in result) {
          if (result[key] == null) {
            delete result[key];
          }
        }
      }
    }
    return _;
  };

  date_test = function() {
    var answer_object, test_string;
    test_string = arguments[0], answer_object = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return deepEqual(fill_result(_this.date_machine(test_string)), [answer_object], test_string);
  };

  date_raw_test = function(test_string, answer_object) {
    return deepEqual(fill_result(_this.date_machine(test_string)), answer_object, test_string);
  };

  test("sanity", function() {
    return ok(1 === 1, "passed!");
  });

  test("date tests", function() {
    date_test('01/1/2011', {
      day: 1,
      month: 1,
      year: 2011
    });
    date_raw_test('All day Thursday-Sunday, Sept. 20-23., Friday September 21', [
      [
        {
          day: 20,
          month: 9
        }, {
          day: 21,
          month: 9
        }, {
          day: 22,
          month: 9
        }, {
          day: 23,
          month: 9
        }
      ], [
        {
          day: 21,
          month: 9
        }
      ]
    ]);
    date_test('12/3/2012', {
      day: 3,
      month: 12,
      year: 2012
    });
    date_test('Wednesday september 12', {
      day: 12,
      month: 9
    });
    date_test('10 pm, Friday September 21', {
      day: 21,
      month: 9,
      hour: 22,
      am_pm: 12
    });
    date_test('9:30 pm, Friday September 2', {
      day: 2,
      month: 9,
      hour: 21,
      minute: 30,
      am_pm: 12
    });
    date_test('10:30 pm., Wednesday September 12', {
      day: 12,
      month: 9,
      hour: 22,
      minute: 30,
      am_pm: 12
    });
    date_raw_test('April 7 November 17', [
      [
        {
          day: 7,
          month: 4
        }
      ], [
        {
          day: 17,
          month: 11
        }
      ]
    ]);
    date_test('Sat, 09/01/2012 - 12:00pm', {
      day: 1,
      month: 9,
      year: 2012,
      hour: 12,
      minute: 0,
      am_pm: 12
    });
    date_test('14 January 2013', {
      day: 14,
      month: 1,
      year: 2013
    });
    date_test('January 11', {
      day: 11,
      month: 1
    });
    date_test('7- 9 pm Wednesday, Oct. 31', {
      month: 10,
      day: 31,
      hour: 19,
      am_pm: 12
    }, {
      timedelta: true,
      hours: 2,
      minutes: 0,
      seconds: 0
    });
    return date_test('Sun, 06/16/2013 - 6:00pm', {
      hour: 18,
      month: 6,
      year: 2013,
      day: 16,
      minute: 0,
      am_pm: 12
    });
  });

}).call(this);
