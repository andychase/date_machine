// Generated by CoffeeScript 1.6.3
(function() {
  var Date, alt_time_range, am_pm, basic_text, date_number, execute_function, function_name_, functions, large_repeat_words, midnight, military_time, month_num_type, month_number, month_range, month_to_number, month_type, multi_time, noon, o, p, parser_description, patt, progressive_match, reparse_emulator, reverse_basic_text, slash, take_, through_range, time_and_time, time_expression, time_range, tree_, until_range, weekday_range_with_extra, weekday_range_with_extra_backwards, weekday_range_with_time, weekday_range_with_time_range, weekday_to_number, year,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Date = function(year, month, day) {
    return {
      year: year,
      month: month,
      day: day
    };
  };

  progressive_match = function(string, possibilities) {
    var character, matches, month, part, value, _i, _len, _ref;
    part = "";
    if (string == null) {
      return;
    }
    _ref = string.toLowerCase();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      character = _ref[_i];
      part += character;
      matches = [];
      for (month in possibilities) {
        value = possibilities[month];
        if (month.indexOf(part) > -1) {
          matches.push(month);
        }
      }
      if (matches.length === 1) {
        return possibilities[matches[0]];
      }
    }
  };

  month_to_number = function(month_string) {
    var months;
    months = {
      "january": 1,
      "february": 2,
      "march": 3,
      "april": 4,
      "may": 5,
      "june": 6,
      "july": 7,
      "august": 8,
      "september": 9,
      "october": 10,
      "november": 11,
      "december": 12
    };
    return progressive_match(month_string, months);
  };

  weekday_to_number = function(WeekdayString) {
    var weekday_list;
    weekday_list = {
      "monday": 0,
      "tuesday": 1,
      "wednesday": 2,
      "thursday": 3,
      "friday": 4,
      "saturday": 5,
      "sunday": 6
    };
    return progressive_match(WeekdayString, weekday_list);
  };

  am_pm = function(input) {
    if (input.toLowerCase() === "am") {
      return 0;
    } else if (input.toLowerCase() === "pm") {
      return 12;
    }
  };

  military_time = function(MilHour, MilMinute, MilSecond) {
    return time_expression(MilHour, MilMinute, MilSecond, void 0);
  };

  noon = function(hour, AMPM) {
    return hour === 12 && AMPM === 12;
  };

  midnight = function(hour, AMPM) {
    return hour === 12 && AMPM === 0;
  };

  time_expression = function(Hour, Minute, Second, AMPM, SpecialTimeText) {
    var d, hour;
    if (SpecialTimeText) {
      if (SpecialTimeText.toLowerCase() === "noon") {
        return Date(hour);
      }
      if (SpecialTimeText.toLowerCase() === "midnight") {
        return Date(hour);
      }
    }
    d = Date();
    if (Hour) {
      d[hour] = Number(Hour);
    }
    if (Minute) {
      d[minute] = Number(Minute);
    }
    if (Second) {
      d[second] = Number(Second);
    }
    if (AMPM != null) {
      if (d.hour) {
        if (noon(d.hour, AMPM)) {
          d = d._replace(hour);
        } else if (midnight(d.hour, AMPM)) {
          d = d._replace(hour);
        } else {
          d = d._replace(hour = d.hour + AMPM);
        }
      }
      d = d._replace(am_pm);
    }
    if ([d.hour, d.minute, d.second] !== [void 0, void 0, void 0]) {
      return d;
    }
  };

  time_and_time = function(Hour, Minute, AMPM1, Hour2, Minute2, AMPM2) {
    if (AMPM2 === !"") {
      AMPM2 = am_pm(AMPM2);
    }
    if (!AMPM1 && !AMPM2) {
      return [time_expression(Hour, Minute), time_expression(Hour, Minute)];
    } else if (!AMPM1) {
      return [time_expression(Hour, Minute, AMPM), time_expression(Hour, Minute, AMPM)];
    } else if (!AMPM2) {
      return [time_expression(Hour, Minute, AMPM), time_expression(Hour, Minute, AMPM)];
    }
  };

  month_type = function() {
    var input, value, _i, _len;
    input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      value = input[_i];
      console.log(value);
      if (value != null) {
        return Number(value);
      }
    }
  };

  date_number = function(Day, Abbr) {
    if (Day) {
      return Number(Day);
    }
  };

  month_number = function(MonthNum) {
    return Number(MonthNum);
  };

  month_num_type = function() {
    var input;
    input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (type(input) === list) {
      return Number(input[0]);
    } else {
      return Number(input);
    }
  };

  year = function(Year) {
    if (Year) {
      return Number(Year);
    }
  };

  weekday_range_with_time = function(time1, time2, weekday1, weekday2, MonthRange) {
    var date, output, _i, _len;
    output = [];
    if (time1) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        output.push(date.update(time1));
        if (time2) {
          output.push(date.update(time2));
        }
      }
    }
    return output;
  };

  weekday_range_with_extra = function(time, and_time, weekday_start, weekday_end, extra_time, extra_weekday, MonthRange) {
    var date, output, _i, _len, _ref;
    output = [];
    if (time) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        if (hasattr(date, 'weekday')) {
          if (_ref = date.weekday, __indexOf.call(range(weekday_start, weekday_end + 1), _ref) >= 0) {
            output.push(date.update(time));
            if (and_time) {
              output.push(date.update(and_time));
            }
          }
          if (date.weekday === extra_weekday) {
            output.push(date.update(extra_time));
          }
        }
      }
    }
    return output;
  };

  weekday_range_with_extra_backwards = function(extra_time, extra_weekday, time, weekday_start, weekday_end, MonthRange) {
    return weekday_range_with_extra(time[0], time[1], weekday_start, weekday_end, extra_time, extra_weekday, MonthRange);
  };

  reverse_basic_text = function(time, day, month, year) {
    return basic_text(time, day, month, year);
  };

  basic_text = function(time, first_second, weekday, month, day, year) {
    if (day == null) {
      day = 1;
    }
    if (time == null) {
      return Date(year, month, day);
    }
    if (time != null) {
      return {
        year: year,
        month: month,
        day: day,
        hour: time.hour,
        minute: time.minute,
        second: time.second,
        am_pm: time.am_pm
      };
    }
  };

  slash = function(month, day, year, time) {
    return basic_text(time, void 0, void 0, month, day, year);
  };

  month_range = function(month, date_a, date_b) {
    var day, output, _i, _ref, _ref1;
    output = [];
    for (day = _i = _ref = date_a[0], _ref1 = date_b[0] + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; day = _ref <= _ref1 ? ++_i : --_i) {
      output.push(basic_text(void 0, void 0, void 0, month, day, void 0));
    }
    return output;
  };

  multi_time = function(time1, BasicText) {
    var output;
    output = [];
    if (time1 && BasicText) {
      output.push(BasicText.update(time1));
      output.push(BasicText);
      return output;
    }
  };

  large_repeat_words = function() {
    return void 0;
  };

  weekday_range_with_time_range = function(time1, weekday_range) {
    var hour, minute, output, range, weekday, _i, _len;
    output = [];
    if (time1 && weekday_range) {
      range = timedelta_from_Date(weekday_range[0].update(time1), weekday_range[0]);
      for (_i = 0, _len = weekday_range.length; _i < _len; _i++) {
        weekday = weekday_range[_i];
        output.push(weekday._replace(hour = time1.hour, minute = time1.minute, am_pm = time1.am_pm));
        output.push(range);
      }
      return output;
    }
  };

  time_range = function(unstrict_time, strict_time, date, reverse) {
    var endtime, hour, minute, starttime;
    endtime = date;
    starttime = endtime;
    if (unstrict_time) {
      starttime = starttime._replace(hour = Number(unstrict_time[0]));
      if (date.am_pm) {
        starttime = starttime._replace(hour = starttime.hour + date.am_pm, am_pm = date.am_pm);
      }
    } else {
      starttime = starttime._replace(hour = strict_time.hour, minute = strict_time.minute);
    }
    time_range = timedelta_from_Date(starttime, endtime);
    if (reverse) {
      time_range = timedelta_from_Date(endtime, starttime);
    }
    return [starttime, time_range];
  };

  alt_time_range = function(first_second, weekday, month, day, year, time, unstrict_time, strict_time) {
    return time_range(unstrict_time, strict_time, basic_text(time, first_second, weekday, month, day, year), reverse);
  };

  until_range = function(date1, date2) {
    if (date1 && date2) {
      return [date1, timedelta_from_Date(date1, date2)];
    }
  };

  through_range = function(time, weekday1, weekday2, month, date, beginning) {
    var day, ending, output, temp, _i, _len, _ref, _ref1;
    output = [];
    if (month && date && beginning && weekday1) {
      ending = Date(month, day);
      _ref = range(beginning.day, ending.day + 1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        day = _ref[_i];
        temp = Date(month, day);
        if (temp.weekday && (_ref1 = temp.weekday, __indexOf.call(range(weekday1, weekday2 + 1), _ref1) >= 0)) {
          if (time) {
            output.push(temp.update(time));
          } else {
            output.push(temp);
          }
        }
      }
      return output;
    }
  };

  functions = {
    "MonthString": month_to_number,
    "AMPM": am_pm,
    "Chase Year": year,
    "Chase Date": date_number,
    "Chase Month": month_number,
    "Steve Valaitis": time_expression,
    "Greg Burns": time_expression,
    "Greg Burns UnstrictTime:": time_expression,
    "Steve Valaitis2": military_time,
    "Steve Valaitis And Time": time_and_time,
    "Text Parts": time_expression,
    "Michael Ash10": weekday_to_number,
    "Month": month_type,
    "MonthNum": month_num_type,
    "LargeRepeatWords": large_repeat_words,
    "BasicText": basic_text,
    "ReverseBasicText": reverse_basic_text,
    "Slash": slash,
    "MonthRange": month_range,
    "MultiTime": multi_time,
    "WeekdayRangeWithTime": weekday_range_with_time,
    "WeekdayRangeWithExtra": weekday_range_with_extra,
    "WeekdayRangeWithExtraBackwards": weekday_range_with_extra_backwards,
    "WeekdayRangeWithTimeRange": weekday_range_with_time_range,
    "UntilRange": until_range,
    "ThroughRange": through_range,
    "TimeRange": time_range,
    "AltTimeRange": alt_time_range,
    "_default": function(_) {
      var item;
      if ((_ != null) && (!(_ instanceof Array) || Math.max([
        (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = _.length; _i < _len; _i++) {
            item = _[_i];
            _results.push(item != null);
          }
          return _results;
        })()
      ]) === 1)) {
        return _;
      } else {
        return void 0;
      }
    },
    "_default_type": function() {
      var item, _, _i, _len, _results;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_ != null) {
        _results = [];
        for (_i = 0, _len = _.length; _i < _len; _i++) {
          item = _[_i];
          if (item != null) {
            _results.push(item);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    },
    "_default_group": function(_) {
      if (_ != null) {
        return _[0];
      }
    }
  };

  parser_description = [
    {
      regex: "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:([12][0-9]{3})))?",
      tree: [12, "ReverseBasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      order: 2
    }, {
      regex: "(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))",
      tree: [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]],
      order: 6
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      tree: [30, "WeekdayRangeWithExtra", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      order: 9
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))),?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))",
      tree: [8, "_default", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      order: 1
    }, {
      regex: "(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?",
      tree: [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      order: 1
    }, {
      regex: "(?:(?:(1[0-2]|[0][1-9])))\\/(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\/(?:(?:([12][0-9]{3})))\\s?-?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?",
      tree: [11, "Slash", [[1, "MonthNum", [[1, "Chase Month", [[1, "MonthNum", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      order: 5
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?\\s(?:and|\\&)\\s([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      tree: [22, "WeekdayRangeWithExtraBackwards", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "_default_type", [[6, "Steve Valaitis And Time", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      order: 10
    }, {
      regex: "(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s?-\\s?(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))",
      tree: [24, "AltTimeRange", [[3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      order: 9
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      tree: [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      order: 7
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\-(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))))",
      tree: [29, "WeekdayRangeWithTimeRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]]]],
      order: 10
    }, {
      regex: "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?",
      tree: [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      order: 3
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\sand\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [23, "MultiTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 4
    }, {
      regex: "(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))\\s?-\\s?(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [24, "TimeRange", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 9
    }, {
      regex: "(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)\\suntil\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [32, "UntilRange", [[16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 11
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s(?:-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s)?\\sthrough\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))).?,?\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [29, "ThroughRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 12
    }
  ];

  take_ = 0;

  function_name_ = 1;

  tree_ = 2;

  reparse_emulator = function(take, function_name, tree, matches, functions) {
    var current_position, element, element_index, relevent_matches, results;
    results = [];
    current_position = 0;
    for (element_index in tree) {
      element = tree[element_index];
      relevent_matches = matches.slice(current_position, current_position + element[take_]);
      console.log(relevent_matches + " ->");
      results.push(reparse_emulator(element[take_], element[function_name_], element[tree_], relevent_matches, functions));
      current_position += element[take_];
    }
    if (tree.length === 0) {
      return execute_function(function_name, matches.slice(0, take), functions, true);
    } else {
      return execute_function(function_name, results, functions, true);
    }
  };

  execute_function = function(function_name, arguments_, functions, is_type) {
    var out;
    console.log(function_name + " w/ " + arguments_);
    out = functions[function_name].apply(functions[function_name], arguments_);
    console.log(out);
    return out;
  };

  patt = new RegExp(parser_description[1].regex, "gi");

  o = patt.exec("June 1-3").slice(1);

  p = parser_description[1].tree;

  console.log(reparse_emulator(p[0], p[1], p[2], o, functions));

}).call(this);
