// Generated by CoffeeScript 1.6.3
(function() {
  var Date, alt_time_range, am_pm, any, basic_text, date_number, execute_function, function_name_, functions, get_best, get_results, large_repeat_words, midnight, military_time, month_num_type, month_number, month_range, month_to_number, month_type, multi_time, noon, overlapping, overlapping_at, parser_description, pattern, progressive_match, remove_lower_overlapping, reparse_emulator, reverse_basic_text, slash, take_, through_range, time_and_time, time_expression, time_range, tree_, until_range, weekday_range_with_extra, weekday_range_with_extra_backwards, weekday_range_with_time, weekday_range_with_time_range, weekday_to_number, year, _i, _len, _replace,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Date = function(year, month, day) {
    return {
      year: year,
      month: month,
      day: day
    };
  };

  _replace = function(_old, _new) {
    return {
      year: _new.year != null ? _new.year : _old.year,
      month: _new.month != null ? _new.month : _old.month,
      day: _new.day != null ? _new.day : _old.day,
      hour: _new.hour != null ? _new.hour : _old.hour,
      minute: _new.minute != null ? _new.minute : _old.minute,
      second: _new.second != null ? _new.second : _old.second,
      am_pm: _new.am_pm != null ? _new.am_pm : _old.am_pm
    };
  };

  progressive_match = function(string, possibilities) {
    var character, matches, month, part, value, _i, _len, _ref;
    part = "";
    if (string == null) {
      return;
    }
    _ref = string.toLowerCase();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      character = _ref[_i];
      part += character;
      matches = [];
      for (month in possibilities) {
        value = possibilities[month];
        if (month.indexOf(part) > -1) {
          matches.push(month);
        }
      }
      if (matches.length === 1) {
        return possibilities[matches[0]];
      }
    }
  };

  month_to_number = function(month_string) {
    var months;
    months = {
      "january": 1,
      "february": 2,
      "march": 3,
      "april": 4,
      "may": 5,
      "june": 6,
      "july": 7,
      "august": 8,
      "september": 9,
      "october": 10,
      "november": 11,
      "december": 12
    };
    return progressive_match(month_string, months);
  };

  weekday_to_number = function(WeekdayString) {
    var weekday_list;
    weekday_list = {
      "monday": 0,
      "tuesday": 1,
      "wednesday": 2,
      "thursday": 3,
      "friday": 4,
      "saturday": 5,
      "sunday": 6
    };
    return progressive_match(WeekdayString, weekday_list);
  };

  am_pm = function(input) {
    if (input == null) {
      return;
    }
    if (input.toLowerCase() === "am") {
      return 0;
    } else if (input.toLowerCase() === "pm") {
      return 12;
    }
  };

  military_time = function(MilHour, MilMinute, MilSecond) {
    return time_expression(MilHour, MilMinute, MilSecond, void 0);
  };

  noon = function(hour, AMPM) {
    return hour === 12 && AMPM === 12;
  };

  midnight = function(hour, AMPM) {
    return hour === 12 && AMPM === 0;
  };

  time_expression = function(Hour, Minute, Second, AMPM, SpecialTimeText) {
    var d;
    if (SpecialTimeText) {
      if (SpecialTimeText.toLowerCase() === "noon") {
        return Date(hour);
      }
      if (SpecialTimeText.toLowerCase() === "midnight") {
        return Date(hour);
      }
    }
    d = Date();
    if (Hour) {
      d.hour = Number(Hour);
    }
    if (Minute) {
      d.minute = Number(Minute);
    }
    if (Second) {
      d.second = Number(Second);
    }
    if (AMPM != null) {
      if (d.hour) {
        if (noon(d.hour, AMPM)) {
          d.hour = 12;
        } else if (midnight(d.hour, AMPM)) {
          d.hour = 0;
        } else {
          d.hour = d.hour + AMPM;
        }
      }
      d.am_pm = AMPM;
    }
    if ([d.hour, d.minute, d.second] !== [void 0, void 0, void 0]) {
      return d;
    }
  };

  time_and_time = function(Hour, Minute, AMPM1, Hour2, Minute2, AMPM2) {
    if (AMPM2 === !"") {
      AMPM2 = am_pm(AMPM2);
    }
    if (!AMPM1 && !AMPM2) {
      return [time_expression(Hour, Minute), time_expression(Hour2, Minute2)];
    } else if (!AMPM1) {
      return [time_expression(Hour, Minute, void 0, AMPM2), time_expression(Hour2, Minute2, void 0, AMPM2)];
    } else if (!AMPM2) {
      return [time_expression(Hour, Minute, void 0, AMPM1), time_expression(Hour2, Minute2, void 0, AMPM1)];
    }
  };

  month_type = function() {
    var input, value, _i, _len;
    input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      value = input[_i];
      if (value != null) {
        return Number(value);
      }
    }
  };

  date_number = function(Day, Abbr) {
    if (Day) {
      return Number(Day);
    }
  };

  month_number = function(MonthNum) {
    return Number(MonthNum);
  };

  month_num_type = function() {
    var input;
    input = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (type(input) === list) {
      return Number(input[0]);
    } else {
      return Number(input);
    }
  };

  year = function(Year) {
    if (Year) {
      return Number(Year);
    }
  };

  weekday_range_with_time = function(time1, time2, _arg, _arg1, MonthRange) {
    var date, output, time, weekday1, weekday2, _i, _j, _k, _len, _len1, _len2;
    weekday1 = _arg[0];
    weekday2 = _arg1[0];
    output = [];
    for (_i = 0, _len = time1.length; _i < _len; _i++) {
      time = time1[_i];
      if (time != null) {
        time1 = time;
        break;
      }
    }
    for (_j = 0, _len1 = time2.length; _j < _len1; _j++) {
      time = time2[_j];
      if (time != null) {
        time2 = time;
        break;
      }
    }
    if (time1) {
      for (_k = 0, _len2 = MonthRange.length; _k < _len2; _k++) {
        date = MonthRange[_k];
        output.push(_replace(date, time1));
        if (time2) {
          output.push(_replace(date, time2));
        }
      }
    }
    return output;
  };

  weekday_range_with_extra = function(time, and_time, weekday_start, weekday_end, extra_time, extra_weekday, MonthRange) {
    var date, output, _i, _len, _ref;
    output = [];
    if (time) {
      for (_i = 0, _len = MonthRange.length; _i < _len; _i++) {
        date = MonthRange[_i];
        if (date.weekday != null) {
          if (_ref = date.weekday, __indexOf.call(range(weekday_start, weekday_end + 1), _ref) >= 0) {
            output.push(_replace(date, time));
            if (and_time) {
              output.push(_replace(date, and_time));
            }
          }
          if (date.weekday === extra_weekday) {
            output.push(_replace(date, extra_time));
          }
        }
      }
    }
    return output;
  };

  weekday_range_with_extra_backwards = function(extra_time, extra_weekday, time, weekday_start, weekday_end, MonthRange) {
    return weekday_range_with_extra(time[0], time[1], weekday_start, weekday_end, extra_time, extra_weekday, MonthRange);
  };

  reverse_basic_text = function(time, day, month, year) {
    return basic_text(time, day, month, year);
  };

  basic_text = function(time, first_second, weekday, month, day, year) {
    if (day == null) {
      day = 1;
    }
    if (time == null) {
      return Date(year, month, day);
    }
    if (time != null) {
      return {
        year: year,
        month: month,
        day: day,
        hour: time.hour,
        minute: time.minute,
        second: time.second,
        am_pm: time.am_pm
      };
    }
  };

  slash = function(month, day, year, time) {
    return basic_text(time, void 0, void 0, month, day, year);
  };

  month_range = function(month, date_a, date_b) {
    var day, output, _i, _ref, _ref1;
    output = [];
    for (day = _i = _ref = date_a[0], _ref1 = date_b[0]; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; day = _ref <= _ref1 ? ++_i : --_i) {
      output.push(basic_text(void 0, void 0, void 0, month, day, void 0));
    }
    return output;
  };

  multi_time = function(time1, BasicText) {
    var output;
    output = [];
    if (time1 && BasicText) {
      output.push(_replace(BasicText, time1));
      output.push(BasicText);
      return output;
    }
  };

  large_repeat_words = function() {
    return void 0;
  };

  weekday_range_with_time_range = function(time1, weekday_range) {
    var output, range, weekday, _i, _len;
    output = [];
    if (time1 && weekday_range) {
      range = timedelta_from_Date(_replace(weekday_range[0], time1), weekday_range[0]);
      for (_i = 0, _len = weekday_range.length; _i < _len; _i++) {
        weekday = weekday_range[_i];
        output.push(_replace(weekday, {
          hour: time1.hour,
          minute: time1.minute,
          am_pm: time1.am_pm
        }));
        output.push(range);
      }
      return output;
    }
  };

  time_range = function(unstrict_time, strict_time, date, reverse) {
    var endtime, starttime;
    endtime = date;
    starttime = endtime;
    if (unstrict_time) {
      starttime = _replace(starttime, {
        hour: Number(unstrict_time[0])
      });
      if (date.am_pm) {
        starttime = _replace(starttime, {
          hour: starttime.hour + date.am_pm,
          am_pm: date.am_pm
        });
      }
    } else {
      starttime = _replace(starttime, {
        hour: strict_time.hour,
        minute: strict_time.minute
      });
    }
    time_range = timedelta_from_Date(starttime, endtime);
    if (reverse) {
      time_range = timedelta_from_Date(endtime, starttime);
    }
    return [starttime, time_range];
  };

  alt_time_range = function(first_second, weekday, month, day, year, time, unstrict_time, strict_time) {
    return time_range(unstrict_time, strict_time, basic_text(time, first_second, weekday, month, day, year), reverse);
  };

  until_range = function(date1, date2) {
    if (date1 && date2) {
      return [date1, timedelta_from_Date(date1, date2)];
    }
  };

  through_range = function(time, weekday1, weekday2, month, date, beginning) {
    var day, ending, output, temp, _i, _ref, _ref1, _ref2;
    output = [];
    if (month && date && beginning && weekday1) {
      ending = Date(month, day);
      for (day = _i = _ref = beginning.day, _ref1 = ending.day; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; day = _ref <= _ref1 ? ++_i : --_i) {
        temp = Date(month, day);
        if (temp.weekday && (_ref2 = temp.weekday, __indexOf.call(range(weekday1, weekday2 + 1), _ref2) >= 0)) {
          if (time) {
            output.push(_replace(temp, time));
          } else {
            output.push(temp);
          }
        }
      }
      return output;
    }
  };

  functions = {
    "MonthString": month_to_number,
    "AMPM": am_pm,
    "Chase Year": year,
    "Chase Date": date_number,
    "Chase Month": month_number,
    "Steve Valaitis": time_expression,
    "Greg Burns": time_expression,
    "Greg Burns UnstrictTime:": time_expression,
    "Steve Valaitis2": military_time,
    "Steve Valaitis And Time": time_and_time,
    "Text Parts": time_expression,
    "Michael Ash10": weekday_to_number,
    "Month": month_type,
    "MonthNum": month_num_type,
    "LargeRepeatWords": large_repeat_words,
    "BasicText": basic_text,
    "ReverseBasicText": reverse_basic_text,
    "Slash": slash,
    "MonthRange": month_range,
    "MultiTime": multi_time,
    "WeekdayRangeWithTime": weekday_range_with_time,
    "WeekdayRangeWithExtra": weekday_range_with_extra,
    "WeekdayRangeWithExtraBackwards": weekday_range_with_extra_backwards,
    "WeekdayRangeWithTimeRange": weekday_range_with_time_range,
    "UntilRange": until_range,
    "ThroughRange": through_range,
    "TimeRange": time_range,
    "AltTimeRange": alt_time_range,
    "_default": function(_) {
      if (any(_)) {
        return _;
      } else {
        return void 0;
      }
    },
    "_default_type": function() {
      var item, _, _i, _len, _results;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_ != null) {
        _results = [];
        for (_i = 0, _len = _.length; _i < _len; _i++) {
          item = _[_i];
          if (item != null) {
            _results.push(item);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    },
    "_default_group": function() {
      var _;
      _ = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_ != null) {
        return _[0];
      }
    }
  };

  parser_description = [
    {
      regex: "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:([12][0-9]{3})))?",
      tree: [12, "ReverseBasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      order: 2
    }, {
      regex: "(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))",
      tree: [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]],
      order: 6
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      tree: [30, "WeekdayRangeWithExtra", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      order: 9
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))),?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))",
      tree: [8, "_default", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      order: 1
    }, {
      regex: "(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?",
      tree: [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]],
      order: 1
    }, {
      regex: "(?:(?:(1[0-2]|[0][1-9])))\\/(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\/(?:(?:([12][0-9]{3})))\\s?-?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?",
      tree: [11, "Slash", [[1, "MonthNum", [[1, "Chase Month", [[1, "MonthNum", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      order: 5
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?\\s(?:and|\\&)\\s([0]?[1-9]|1[0-2])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?))\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      tree: [22, "WeekdayRangeWithExtraBackwards", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "_default_type", [[6, "Steve Valaitis And Time", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      order: 10
    }, {
      regex: "(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?\\s?(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\s?-\\s?(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))",
      tree: [24, "AltTimeRange", [[3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]]]],
      order: 9
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))))",
      tree: [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]],
      order: 7
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\-(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))(?:\\sand\\s(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s?(?:(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))\\s?-\\s?(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))))",
      tree: [29, "WeekdayRangeWithTimeRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [22, "WeekdayRangeWithTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [6, "MonthRange", [[2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]]]]]]]],
      order: 10
    }, {
      regex: "(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?",
      tree: [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]],
      order: 3
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))\\sand\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [23, "MultiTime", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 4
    }, {
      regex: "(?:(?:(?:([0-9]|[1][0-2])))|(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm))))\\s?-\\s?(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [24, "TimeRange", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 9
    }, {
      regex: "(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)\\suntil\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [32, "UntilRange", [[16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 11
    }, {
      regex: "(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?\\s(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s(?:-(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s)?\\sthrough\\s(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9]))).?,?\\s(?:(?:(?:(?:([0]?[1-9]|1[0-2])[:\\.]([0-5][0-9])(?:[:\\.]([0-5][0-9]))?\\s?(am|pm)?)|(?:(Noon|Midnight))|(?:([0-9]|[1][0-2])\\s?(am|pm)))?.?,?\\s)?(?:(?:(?:every\\s)?(?:(?:(First|Second|Third|Fou?rth)))?(?:\\sand\\s(?:(?:(First|Second|Third|Fou?rth))))?\\s?(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?))s?,?\\s?(?:\\s?of\\sthe\\s(?:month|week))?).?,?\\s?)?(?:(?:(?:((?:Sun|Mon|(?:T(?:ues|hurs))|Fri)(?:day|\\.)?|Wed(?:\\.|nesday)?|Sat(?:\\.|urday)?|T(?:(?:ue?)|(?:hu?r?)))\\.?)),?\\s)?(?:(?:(J(?:anuary|u(?:ne|ly))|February|Ma(?:rch|y)|A(?:pril|ugust)|(?:(?:(?:Sept|Nov|Dec)em)|Octo)ber))|(?:(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec).?))\\s(?:(?:(3[0-2]|[0-2]?[0-9])(th|rd|st|nd)?(?![0-9])))[.,\\s]?(?:(?:([12][0-9]{3})))?)",
      tree: [29, "ThroughRange", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [16, "BasicText", [[7, "_default_type", [[4, "Steve Valaitis", [[1, "_default_group", []], [1, "_default_group", []], [1, "_default_group", []], [1, "AMPM", []]]], [1, "Text Parts", [[1, "_default_group", []]]], [2, "Greg Burns", [[1, "_default_group", []], [1, "AMPM", []]]]]], [3, "LargeRepeatWords", [[1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "_default", [[1, "_default_group", []]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]]]], [1, "_default_type", [[1, "Michael Ash10", [[1, "_default_group", []]]]]], [2, "Month", [[1, "_default", [[1, "MonthString", []]]], [1, "_default", [[1, "MonthString", []]]]]], [2, "_default_type", [[2, "Chase Date", [[1, "_default_group", []], [1, "_default_group", []]]]]], [1, "_default_type", [[1, "Chase Year", [[1, "_default_group", []]]]]]]]]],
      order: 12
    }
  ];

  take_ = 0;

  function_name_ = 1;

  tree_ = 2;

  overlapping = function(start1, end1, start2, end2) {
    return !((start1 <= start2 && start1 <= end2 && end1 <= end2 && end1 <= start2) || (start1 >= start2 && start1 >= end2 && end1 >= end2 && end1 >= start2));
  };

  overlapping_at = function(start, end, current) {
    var c_end, c_start, current_index, output, _, _ref;
    output = [];
    for (current_index in current) {
      _ref = current[current_index], _ = _ref[0], c_start = _ref[1], c_end = _ref[2];
      if (overlapping(c_start, c_end, start, end)) {
        output.push(current_index);
      }
    }
    return output;
  };

  remove_lower_overlapping = function(current, higher) {
    var h_end, h_start, match, overlap, overlaps, _i, _j, _len, _len1, _ref;
    for (_i = 0, _len = higher.length; _i < _len; _i++) {
      _ref = higher[_i], match = _ref[0], h_start = _ref[1], h_end = _ref[2];
      overlaps = overlapping_at(h_start, h_end, current);
      for (_j = 0, _len1 = overlaps.length; _j < _len1; _j++) {
        overlap = overlaps[_j];
        delete current[overlap];
      }
      if (overlaps.length > 0) {
        current.splice(overlaps[0], 0, [match, h_start, h_end]);
      } else {
        current.push([match, h_start, h_end]);
      }
    }
    return current;
  };

  get_results = function(_) {
    var i, _results;
    _results = [];
    for (i in _) {
      _results.push(_[i][2]);
    }
    return _results;
  };

  any = function(_) {
    return (_ != null) && ((!(_ instanceof Array)) || _.filter(function(a) {
      return a != null;
    }).length > 0);
  };

  get_best = function(_) {
    return get_results(_.reduce(remove_lower_overlapping, []));
  };

  reparse_emulator = function(take, function_name, tree, matches, functions) {
    var current_position, element, element_index, relevent_matches, results;
    results = [];
    current_position = 0;
    for (element_index in tree) {
      element = tree[element_index];
      relevent_matches = matches.slice(current_position, current_position + element[take_]);
      results.push(reparse_emulator(element[take_], element[function_name_], element[tree_], relevent_matches, functions));
      current_position += element[take_];
    }
    if (tree.length === 0) {
      return execute_function(function_name, matches.slice(0, take), functions, true);
    } else {
      return execute_function(function_name, results, functions, true);
    }
  };

  execute_function = function(function_name, arguments_, functions, is_type) {
    return functions[function_name].apply(functions[function_name], arguments_);
  };

  for (_i = 0, _len = parser_description.length; _i < _len; _i++) {
    pattern = parser_description[_i];
    pattern.regex = new RegExp(pattern.regex, "gi");
  }

  this.date_machine = function(input) {
    var end, function_name, matcher_output, o, out, regex, start, take, tree, _j, _len1, _ref;
    out = [];
    for (_j = 0, _len1 = parser_description.length; _j < _len1; _j++) {
      pattern = parser_description[_j];
      regex = pattern.regex;
      _ref = pattern.tree, take = _ref[0], function_name = _ref[1], tree = _ref[2];
      while ((o = regex.exec(input)) !== null) {
        matcher_output = reparse_emulator(take, function_name, tree, o.slice(1), functions);
        end = regex.lastIndex;
        start = regex.lastIndex - o[0].length;
        if (any(matcher_output)) {
          out.push([pattern.order, [start, end, [].concat(matcher_output)]]);
        }
      }
    }
    return get_best(out.sort(function(a, b) {
      return a[0] - b[0];
    }));
  };

}).call(this);
